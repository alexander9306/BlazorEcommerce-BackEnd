// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sistema.Api.Datos;

namespace Sistema.Api.Migrations
{
    [DbContext(typeof(DbContextSistema))]
    partial class DbContextSistemaModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("Sistema.Api.Entidades.Almacen.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 850, DateTimeKind.Local).AddTicks(7680),
                            Descripcion = "Celulares nuevos y usados.",
                            Estado = true,
                            Nombre = "Celulares",
                            UpdatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 851, DateTimeKind.Local).AddTicks(5429)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 851, DateTimeKind.Local).AddTicks(5789),
                            Descripcion = "Tenemos computadoras de ultima generacion.",
                            Estado = true,
                            Nombre = "Computadoras",
                            UpdatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 851, DateTimeKind.Local).AddTicks(5798)
                        });
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Almacen.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Marca")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            CreatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3297),
                            Estado = true,
                            Marca = "Apple",
                            Nombre = "Iphone 7 - Usado",
                            Precio = 27000.00m,
                            Stock = 15,
                            UpdatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3001)
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 1,
                            CreatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3639),
                            Estado = true,
                            Marca = "Apple",
                            Nombre = "Iphone 7 - Nuevo",
                            Precio = 34000.00m,
                            Stock = 5,
                            UpdatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3630)
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 2,
                            CreatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3647),
                            Estado = true,
                            Marca = "Lenovo",
                            Nombre = "Lenovo N10 - Nuevo",
                            Precio = 34000.00m,
                            Stock = 10,
                            UpdatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3646)
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 2,
                            CreatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3650),
                            Estado = true,
                            Marca = "Lenovo",
                            Nombre = "Lenovo L34 - Nuevo",
                            Precio = 40000.00m,
                            Stock = 10,
                            UpdatedAt = new DateTime(2020, 7, 26, 16, 59, 21, 853, DateTimeKind.Local).AddTicks(3649)
                        });
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Almacen.ProductoFoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FotoPublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsPrincipal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductoFotos");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Carrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClienteGuid")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.DetalleCarrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarritoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarritoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleCarritos");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarritoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitud")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitud")
                        .HasColumnType("REAL");

                    b.Property<int>("Telefono")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarritoId")
                        .IsUnique();

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Monto")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrdenId")
                        .IsUnique();

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdenId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrdenId")
                        .IsUnique();

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Usuario.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RolId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Usuario.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNac")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Usuario.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Acceso máximo del sistema.",
                            Estado = false,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Acceso a las ordenes del sistema.",
                            Estado = false,
                            Nombre = "Organizador"
                        });
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Almacen.Producto", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Almacen.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Almacen.ProductoFoto", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Almacen.Producto", null)
                        .WithMany("Fotos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Carrito", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Usuario.Cliente", "Cliente")
                        .WithOne("Carrito")
                        .HasForeignKey("Sistema.Api.Entidades.Ordenes.Carrito", "ClienteId");
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.DetalleCarrito", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Ordenes.Carrito", "Carrito")
                        .WithMany("Detalles")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Api.Entidades.Almacen.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Orden", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Ordenes.Carrito", null)
                        .WithOne("Orden")
                        .HasForeignKey("Sistema.Api.Entidades.Ordenes.Orden", "CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Api.Entidades.Usuario.Cliente", null)
                        .WithOne("Orden")
                        .HasForeignKey("Sistema.Api.Entidades.Ordenes.Orden", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Pago", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Ordenes.Orden", "Orden")
                        .WithOne("Pago")
                        .HasForeignKey("Sistema.Api.Entidades.Ordenes.Pago", "OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Ordenes.Pedido", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Ordenes.Orden", "Orden")
                        .WithOne("Pedido")
                        .HasForeignKey("Sistema.Api.Entidades.Ordenes.Pedido", "OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Api.Entidades.Usuario.Administrador", b =>
                {
                    b.HasOne("Sistema.Api.Entidades.Usuario.Rol", "Rol")
                        .WithMany("Administradores")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
